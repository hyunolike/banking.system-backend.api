# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: banking system backend api server CI

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./api_server

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Build with Gradle
      run: ./gradlew clean build
      
#      # 디렉토리 생성
#     - name: Make Directory
#       run: mkdir -p deploy

#     - run: cd ./build && ls -al
        
#     # Jar 파일 복사
#     - name: Copy Jar
#       run: cp ./build/libs/*.jar ./deploy

    - name: Run a multi-line script
      run: |
        mkdir ../build
        cp ./build/libs/*.jar ../build
        tar -cvf deploy.tar ../build/
      
    - name: executing remote ssh commands using password
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.NCP_HOST }}
        username: ${{ secrets.NCP_USERNAME }}
        password: ${{ secrets.NCP_PASS }}
        port: ${{ secrets.NCP_PORT }}
        source: deploy.tar
        target: /root/deploy
      
#     - run: apt-get install sshpass
      
#     - name: SCP 
#       run: sshpass -p ${{secrets.NCP_PASS}} scp -P ${{secrets.NCP_PORT}} ./deploy/*.jar ${{secrets.NCP_USERNAME}}@${{secrets.NCP_HOST}}:./deploy
      
    # ssh 서버 접속
#     - name: ssh scp ssh pipelines
#       uses: cross-the-world/ssh-scp-ssh-pipelines@latest
#       env:
#         FIRST_INFO: "success connect naver cloud"
#         LAST_INFO: "success scp naver cloud"
#       with:
#         host: ${{secrets.NCP_HOST}}
#         user: ${{secrets.NCP_USERNAME}}
#         pass: ${{secrets.NCP_PASS}}
#         port: ${{secrets.NCP_PORT}}
#         connect_timeout: 20s
#         first_ssh: |
#           ls -la || echo $FIRST_INFO
#         scp: ./build/libs/*.jar => ./deploy/
#         last_ssh: |
#           ls -la || echo $LAST_INFO 
      
    
